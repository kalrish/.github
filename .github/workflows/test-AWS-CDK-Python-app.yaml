---

# GitHub workflow to test changes (as in pull requests) on my GitHub repositories hosting AWS CDK apps written in Python

name: AWS CDK Python app change testing


env:
  npm_config_fund: 'false'
  npm_config_loglevel: verbose
  PIP_VERBOSE: '1'
  PIP_PROGRESS_BAR: 'off'
  PIPENV_DONT_USE_PYENV: '1'
  PIPENV_VERBOSE: '1'


# Without quotes, this key could be parsed as the boolean true value instead of the string "on"
'on':
  workflow_call:


jobs:

  deploy:
    name: Deploy CDK app
    defaults:
      run:
        # The shell steps on this job don't need Bash,
        # to which GitHub Actions defaults on Linux runners;
        # POSIX shell functionality suffices.
        shell: sh
    permissions:
      contents: read
      id-token: write  # needed by aws-actions/configure-aws-credentials@v1
    runs-on:
      - ubuntu-latest
    steps:
      -
        name: Check out branch approved for merging
        uses: actions/checkout@v3
        with:
          # This job does not require git history
          fetch-depth: 1
      -
        name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version-file: .nvmrc
      -
        name: Install Node.js dependencies
        run: >-
          npm
          ci
      -
        name: Set up Python
        uses: actions/setup-python@v4
        with:
          cache: pipenv
          # FIXME: Get Python version from Pipfile once supported[1]
          # 1: https://github.com/actions/setup-python/issues/574
          python-version-file: .python-version
      -
        name: Install Pipenv
        run: >-
          pip
          install
          --
          pipenv
      -
        name: Install Python dependencies
        run: >-
          pipenv
          sync
      -
        name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          ## half an hour
          #role-duration-seconds: 1800
          role-external-id: FIXME
          #role-session-name: FIXME
          role-skip-session-tagging: false
          role-to-assume: ${{role.ARN}}
          role-to-assume: arn:${{ partition }}:iam::${{ CDK_DEFAULT_ACCOUNT }}:role${{ role.path }}${{ role.name }}
      -
        name: Deploy CDK app
        # The `cdk` command must run under both `pipenv run` and `npx` because:
        #  - the dependencies of the CDK code are installed in a virtualenv managed by Pipenv; and
        #  - the command `cdk` itself is installed locally by npm.
        run: >-
          pipenv
          run
          --
          npx
          --
          cdk
          --ci
          --notices
          --output=cdk.out
          --strict
          --verbose
          deploy

  # What gets deployed are the CloudFormation templates generated by the CDK.
  # Being able to look into what the CDK generated can be useful when debugging.
  synthesize:
    name: Synthesize CloudFormation templates
    defaults:
      run:
        # The shell steps on this job don't need Bash,
        # to which GitHub Actions defaults on Linux runners;
        # POSIX shell functionality suffices.
        shell: sh
    permissions:
      contents: read
    runs-on:
      - ubuntu-latest
    steps:
      -
        name: Check out branch proposed for merging
        uses: actions/checkout@v3
        with:
          # This job does not require git history
          fetch-depth: 1
      -
        name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm
          # Besides .nvmrc, actions/setup-node@v3 can read the Node.js version to install from other sources:
          #  - the key `engines.node` in package.json;
          #  - the key `volta.node` in package.json;
          #  - the file .node-version; and
          #  - the file .tool-versions.
          # The key `engines` in package.json[1] is meant for distributable packages;
          # this was the conceptual reason of the Volta team for resorting to their own key[2].
          # .node-version is supported by multiple tools, but not by NVM[3], which seems the most popular, and it doesn't support semver specifications.
          # .tool-versions is supported by asdf, which seems interesting but David was too lazy to dive into.
          # 1: https://docs.npmjs.com/cli/v9/configuring-npm/package-json#engines
          # 2: https://github.com/volta-cli/volta/issues/742#issuecomment-631588143
          # 3: https://github.com/nvm-sh/nvm/issues/794
          node-version-file: .nvmrc
      -
        name: Install Node.js dependencies
        run: >-
          npm
          ci
      -
        name: Set up Python
        uses: actions/setup-python@v4
        with:
          cache: pipenv
          # FIXME: Get Python version from Pipfile once supported[1]
          # 1: https://github.com/actions/setup-python/issues/574
          python-version-file: .python-version
      -
        name: Install Pipenv
        run: >-
          pip
          install
          --
          pipenv
      -
        name: Install Python dependencies
        run: >-
          pipenv
          sync
      -
        name: Synthesize CloudFormation templates
        # The `cdk` command must run under both `pipenv run` and `npx` because:
        #  - the dependencies of the CDK code are installed in a virtualenv managed by Pipenv; and
        #  - the command `cdk` itself is installed locally by npm.
        # --lookups=false because context should be in version control
        run: >-
          pipenv
          run
          --
          npx
          --
          cdk
          --ci
          --lookups=false
          --notices
          --output=cdk.out
          --strict
          --verbose
          synthesize
      -
        name: Upload CloudFormation templates
        uses: actions/upload-artifact@v3
        with:
          name: CloudFormation templates
          path: |
            cdk.out/
